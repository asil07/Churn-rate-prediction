# -*- coding: utf-8 -*-
"""with_Neural_Network.ipynb

Automatically generated by Colaboratory.


## Assalomu Alaykum Varahmatulloh Vabarakatuh! 

Ushbu tasknni bajarishda Jupyter notebook ning google_coolabrotary IDLE dan foydalandim

###Quyidagi toollarni ishlatdim

*   panda, numpy

###Malumotlarni tozalash va uni trainingga tayyorlash uchun


*   sklearn, label_encoder, standard scaler, numpy


###Model training qilich uchun 

*   Keras
### Visualisation uchun


*   Seaborn
*   Matplotlib

###Training yakunida model **93% accuracy** ga erishdi
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split

"""Faylni yuklash uchun"""

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("churn_copy.csv")
df.head()

"""### Bu yerda mijozlarning va ularning tark etish soni ko'rsatilgan"""

sns.countplot(df["Churn?"])

"""### O'rtacha qiymatlar"""

min_col = ['Day Mins','Eve Mins','Night Mins','Intl Mins']
for col in min_col:
  print(f"Avarage of {col}: {df[col].mean()}")

# minimums
for col in min_col[1:]:
  print(f'Minimums of {col}: {df[col].min()}')

df.dtypes

"""### Object formatidagi qiymatlarni integer qiymatiga o'tkizib olamiz


"""

for column in df.columns:
  if df[column].dtype == np.number: 
    continue
  else:
    df[column] = LabelEncoder().fit_transform(df[column])
df.dtypes

df.shape

y = df['Churn?']
y.size

"""### Boolean objectlarini 1 va 0 qiymatlari bilan alamshtirib olamiz

### Labeling qilishda oson bo'ladi





"""

y = y.replace({False: 0, True: 1})

y.head()

"""### Bu yerda biz **Neaural Network** uchun kiruvchi **feature** larni ko'rsatamiz yani "Churn?" ustunidan tashqari barcha ustunlar

---


Undan tashqari Label uchun Churn ustunini alohida 
variable saqlaymiz va Standard scaler funksiyasini ishlatamiz
"""

# dropping churn value
X = df.drop("Churn?", axis=1) # Feature

y = df["Churn?"]


X = StandardScaler().fit_transform(X)

X

X.shape

"""Train va Test uchun malumotlarni 2 ga ajratib olamiz



*   80% training uchun
*   20% test qilish uchun


*   Doim bir xil data pointlarni olish uchun random state ni ishlatamiz




"""

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

x_train.shape

x_test.shape

"""### Endi modelimizni train qilamiz
Bu model 100 ta epoch va ADAM optimizeri bilan 96% aniqlikka erishdi



"""

import tensorflow as tf
from tensorflow import keras


model = keras.Sequential([
    keras.layers.Dense(20, input_shape=(20,), activation='relu'),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])



model.compile(optimizer='ADAM',
              loss='binary_crossentropy',
              metrics=['accuracy'])

H = model.fit(x_train, y_train, epochs=100)
model.save("NN_model.hdf5")

"""### Predict qilib ko'ramiz"""

pred = model.predict(x_test)
pred[:5]

"""### prediction variable ga **50%** dan katta bo'lgan predictlar uchun True yani 1, va qolganlariga esa False yani 0 qiymatlarini beramiz"""

predictions = []
for p in pred:
    if p > 0.5:
        predictions.append(1)
    else:
        predictions.append(0)

predictions[:5]

y_test[:5]

print(classification_report(y_test, predictions))

plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, 100), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, 100), H.history["accuracy"], label="train_acc")

plt.title("Aniqlik va yo'qotish jadvali")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend()
plt.savefig("jadval.png")
plt.show()